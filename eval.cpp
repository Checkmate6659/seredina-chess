#include "eval.hpp"
#include "chess.hpp"

//PSQT: pawn, knight, bishop, rook, queen, king
//Layout: A8 B8 ... H8 A7 ... H1: WARNING: for white it is flipped, for Black it isn't
/* constexpr ValPair psqt[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(305, 553), S(423, 518), S(271, 495), S(360, 437), S(327, 463), S(410, 434), S(225, 521), S(75, 592), S(144, 270), S(181, 245), S(214, 199), S(217, 144), S(296, 117), S(314, 144), S(227, 209), S(137, 234), S(114, 220), S(183, 192), S(171, 169), S(205, 137), S(210, 143), S(190, 153), S(201, 181), S(114, 188), S(90, 199), S(149, 187), S(153, 159), S(186, 147), S(194, 149), S(175, 150), S(180, 170), S(109, 164), S(95, 179), S(147, 182), S(152, 155), S(141, 165), S(168, 167), S(171, 158), S(225, 159), S(134, 149), S(74, 195), S(152, 181), S(117, 183), S(111, 177), S(128, 188), S(206, 163), S(231, 165), S(113, 150), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
S(296, 425), S(448, 458), S(542, 504), S(540, 469), S(782, 438), S(443, 467), S(591, 399), S(433, 349), S(510, 476), S(570, 509), S(794, 459), S(697, 514), S(692, 493), S(776, 455), S(637, 475), S(625, 417), S(555, 478), S(762, 472), S(716, 534), S(771, 525), S(827, 491), S(886, 484), S(793, 464), S(730, 431), S(622, 491), S(677, 524), S(682, 560), S(748, 552), S(715, 554), S(786, 527), S(678, 529), S(687, 480), S(616, 489), S(653, 510), S(673, 550), S(669, 565), S(696, 547), S(683, 551), S(683, 530), S(626, 481), S(596, 474), S(625, 515), S(665, 512), S(663, 546), S(679, 536), S(676, 507), S(690, 478), S(610, 476), S(578, 451), S(537, 491), S(619, 503), S(635, 508), S(639, 512), S(676, 478), S(613, 480), S(606, 433), S(402, 486), S(599, 412), S(527, 482), S(575, 492), S(607, 477), S(590, 480), S(606, 416), S(596, 398), 
S(627, 519), S(664, 514), S(467, 554), S(544, 549), S(580, 552), S(585, 536), S(653, 520), S(673, 498), S(649, 532), S(739, 537), S(666, 562), S(641, 539), S(757, 535), S(805, 521), S(746, 534), S(606, 527), S(650, 555), S(758, 530), S(775, 543), S(766, 541), S(756, 540), S(795, 548), S(747, 552), S(678, 556), S(684, 546), S(702, 567), S(731, 567), S(788, 563), S(769, 571), S(764, 563), S(706, 552), S(684, 554), S(681, 539), S(720, 550), S(718, 572), S(740, 583), S(754, 563), S(715, 564), S(711, 540), S(696, 534), S(692, 529), S(721, 545), S(722, 565), S(721, 568), S(716, 574), S(747, 549), S(724, 539), S(708, 522), S(699, 527), S(727, 511), S(721, 538), S(693, 547), S(710, 551), S(728, 535), S(758, 514), S(701, 492), S(622, 519), S(681, 537), S(666, 501), S(649, 546), S(663, 538), S(670, 516), S(611, 548), S(640, 525), 
S(935, 993), S(975, 978), S(926, 1001), S(1013, 975), S(999, 980), S(868, 1000), S(877, 995), S(909, 987), S(932, 989), S(937, 993), S(1009, 978), S(1020, 974), S(1049, 943), S(1041, 957), S(916, 989), S(959, 974), S(848, 998), S(900, 992), S(919, 986), S(926, 985), S(892, 982), S(959, 960), S(1006, 949), S(898, 966), S(810, 999), S(839, 992), S(876, 1004), S(916, 977), S(902, 980), S(934, 974), S(855, 976), S(825, 994), S(789, 997), S(808, 998), S(844, 996), S(858, 988), S(871, 972), S(845, 972), S(886, 958), S(821, 968), S(768, 985), S(817, 985), S(833, 972), S(824, 982), S(862, 965), S(854, 959), S(858, 961), S(800, 958), S(769, 983), S(837, 968), S(823, 982), S(841, 985), S(859, 964), S(875, 962), S(857, 954), S(727, 990), S(821, 970), S(833, 986), S(861, 986), S(880, 979), S(884, 969), S(855, 966), S(802, 985), S(820, 936), 
S(1657, 1820), S(1677, 1900), S(1715, 1900), S(1710, 1900), S(1906, 1807), S(1899, 1793), S(1800, 1813), S(1783, 1864), S(1665, 1815), S(1640, 1881), S(1702, 1901), S(1694, 1930), S(1649, 1979), S(1828, 1867), S(1773, 1877), S(1808, 1817), S(1676, 1812), S(1670, 1866), S(1729, 1846), S(1696, 1951), S(1751, 1942), S(1824, 1884), S(1786, 1884), S(1806, 1844), S(1637, 1878), S(1645, 1902), S(1664, 1901), S(1671, 1938), S(1698, 1958), S(1719, 1929), S(1688, 1972), S(1687, 1936), S(1682, 1806), S(1637, 1923), S(1682, 1886), S(1681, 1940), S(1689, 1914), S(1692, 1911), S(1698, 1918), S(1695, 1879), S(1662, 1837), S(1710, 1776), S(1678, 1878), S(1693, 1853), S(1689, 1871), S(1701, 1880), S(1724, 1861), S(1703, 1852), S(1631, 1808), S(1683, 1801), S(1724, 1775), S(1701, 1812), S(1713, 1815), S(1726, 1796), S(1702, 1759), S(1703, 1782), S(1692, 1777), S(1665, 1786), S(1681, 1797), S(1719, 1736), S(1662, 1835), S(1644, 1788), S(1629, 1812), S(1605, 1759), 
S(-57, -149), S(329, -127), S(277, -94), S(158, -70), S(-223, 13), S(-117, 37), S(122, -21), S(85, -52), S(337, -92), S(141, -1), S(67, 7), S(189, -8), S(84, 15), S(45, 59), S(-56, 49), S(-212, 48), S(121, -13), S(126, 16), S(158, 14), S(44, 17), S(88, 14), S(183, 55), S(210, 45), S(-17, 18), S(17, -27), S(-23, 42), S(29, 39), S(-76, 62), S(-70, 58), S(-54, 71), S(-14, 54), S(-128, 24), S(-108, -25), S(42, -13), S(-102, 56), S(-185, 78), S(-190, 85), S(-125, 66), S(-107, 39), S(-142, 1), S(18, -42), S(4, -4), S(-58, 33), S(-123, 60), S(-123, 66), S(-103, 53), S(-14, 18), S(-52, -8), S(38, -58), S(37, -25), S(-18, 16), S(-143, 43), S(-102, 44), S(-45, 22), S(43, -14), S(56, -50), S(-9, -111), S(101, -88), S(39, -48), S(-124, -8), S(15, -62), S(-60, -18), S(78, -69), S(73, -115)};
constexpr ValPair tempo = S(34, 33);
constexpr ValPair passer_coefs[] = {S(0, 0), S(6, -20), S(-18, -4), S(-36, 28), S(1, 65), S(5, 167), S(0, 0), S(0, 0)};
 */

constexpr ValPair psqt[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(219, 659), S(366, 597), S(208, 573), S(307, 513), S(267, 544), S(366, 501), S(181, 605), S(29, 663), S(147, 269), S(186, 240), S(213, 197), S(222, 143), S(306, 112), S(327, 137), S(228, 207), S(140, 234), S(118, 219), S(182, 191), S(173, 166), S(208, 133), S(213, 139), S(192, 151), S(204, 178), S(118, 185), S(93, 198), S(154, 185), S(151, 159), S(190, 145), S(200, 145), S(179, 148), S(189, 167), S(112, 162), S(99, 177), S(149, 180), S(152, 153), S(143, 162), S(171, 164), S(173, 156), S(232, 155), S(137, 147), S(79, 193), S(155, 180), S(122, 181), S(117, 173), S(133, 187), S(212, 160), S(239, 161), S(118, 148), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
S(287, 413), S(458, 442), S(592, 474), S(599, 439), S(850, 411), S(429, 463), S(601, 391), S(420, 346), S(505, 466), S(573, 491), S(825, 434), S(707, 498), S(711, 476), S(781, 444), S(663, 453), S(634, 405), S(571, 454), S(784, 451), S(729, 514), S(792, 505), S(877, 459), S(921, 461), S(803, 449), S(783, 405), S(645, 467), S(696, 502), S(699, 536), S(774, 532), S(739, 533), S(820, 503), S(698, 507), S(709, 459), S(638, 469), S(675, 486), S(689, 529), S(688, 545), S(718, 526), S(700, 532), S(704, 507), S(651, 459), S(622, 450), S(643, 496), S(687, 492), S(683, 525), S(702, 514), S(699, 488), S(711, 458), S(640, 451), S(605, 428), S(544, 477), S(641, 485), S(658, 487), S(662, 493), S(700, 457), S(630, 459), S(632, 409), S(425, 477), S(625, 394), S(549, 464), S(595, 476), S(636, 455), S(606, 464), S(632, 397), S(631, 380), 
S(653, 500), S(718, 485), S(493, 527), S(570, 524), S(610, 525), S(600, 518), S(682, 511), S(689, 484), S(688, 503), S(746, 516), S(682, 533), S(670, 512), S(768, 512), S(825, 498), S(752, 512), S(640, 510), S(689, 527), S(785, 505), S(791, 523), S(798, 512), S(774, 522), S(827, 527), S(785, 523), S(716, 534), S(709, 522), S(724, 543), S(745, 547), S(815, 536), S(788, 549), S(793, 538), S(724, 533), S(710, 532), S(694, 519), S(742, 529), S(737, 551), S(761, 565), S(775, 541), S(737, 541), S(726, 522), S(716, 512), S(715, 506), S(737, 522), S(738, 543), S(743, 544), S(739, 550), S(768, 526), S(743, 516), S(732, 498), S(720, 502), S(746, 489), S(748, 511), S(714, 526), S(731, 532), S(751, 511), S(780, 489), S(721, 469), S(637, 499), S(702, 517), S(689, 480), S(666, 523), S(685, 514), S(694, 490), S(631, 524), S(667, 503), 
S(984, 951), S(1016, 939), S(979, 960), S(1069, 936), S(1057, 940), S(932, 960), S(946, 951), S(962, 946), S(982, 944), S(978, 951), S(1045, 939), S(1050, 940), S(1095, 902), S(1086, 912), S(962, 944), S(1007, 931), S(884, 957), S(946, 951), S(968, 941), S(952, 950), S(933, 941), S(1010, 916), S(1058, 905), S(943, 926), S(851, 954), S(882, 948), S(904, 967), S(949, 939), S(944, 938), S(956, 937), S(915, 927), S(853, 956), S(822, 956), S(846, 957), S(878, 957), S(898, 947), S(912, 932), S(879, 933), S(932, 918), S(854, 926), S(809, 945), S(854, 945), S(871, 932), S(864, 942), S(901, 925), S(891, 922), S(897, 922), S(837, 920), S(811, 941), S(875, 927), S(863, 944), S(880, 948), S(896, 926), S(918, 921), S(890, 916), S(764, 951), S(860, 937), S(871, 953), S(896, 954), S(916, 947), S(919, 939), S(892, 935), S(837, 955), S(857, 904), 
S(1741, 1776), S(1755, 1865), S(1799, 1861), S(1807, 1849), S(2008, 1754), S(2011, 1734), S(1888, 1773), S(1858, 1837), S(1747, 1767), S(1714, 1839), S(1790, 1851), S(1771, 1888), S(1746, 1929), S(1925, 1804), S(1852, 1844), S(1907, 1763), S(1769, 1752), S(1765, 1799), S(1805, 1799), S(1801, 1900), S(1836, 1895), S(1915, 1846), S(1891, 1810), S(1915, 1776), S(1727, 1835), S(1745, 1835), S(1760, 1845), S(1757, 1886), S(1772, 1923), S(1813, 1879), S(1780, 1935), S(1784, 1886), S(1781, 1752), S(1732, 1873), S(1779, 1827), S(1774, 1885), S(1783, 1853), S(1786, 1861), S(1789, 1877), S(1788, 1839), S(1758, 1782), S(1809, 1719), S(1776, 1818), S(1793, 1801), S(1781, 1821), S(1799, 1828), S(1818, 1814), S(1800, 1805), S(1729, 1754), S(1779, 1748), S(1824, 1718), S(1800, 1758), S(1812, 1760), S(1830, 1733), S(1796, 1706), S(1799, 1727), S(1790, 1722), S(1767, 1726), S(1779, 1747), S(1819, 1685), S(1764, 1785), S(1734, 1746), S(1720, 1771), S(1700, 1712), 
S(-89, -146), S(269, -111), S(278, -87), S(164, -79), S(-232, 15), S(-123, 39), S(128, -27), S(103, -47), S(312, -87), S(78, 17), S(39, 21), S(224, -9), S(110, 10), S(66, 50), S(-99, 52), S(-251, 66), S(126, -14), S(125, 13), S(177, 7), S(29, 21), S(102, 12), S(234, 40), S(241, 39), S(-14, 13), S(4, -24), S(-52, 45), S(66, 32), S(-74, 61), S(-65, 55), S(-43, 65), S(14, 46), S(-145, 26), S(-104, -30), S(70, -25), S(-85, 51), S(-185, 76), S(-184, 80), S(-130, 64), S(-103, 36), S(-150, 3), S(38, -43), S(4, -7), S(-60, 31), S(-123, 58), S(-119, 62), S(-99, 49), S(-14, 16), S(-56, -6), S(41, -57), S(37, -23), S(-18, 17), S(-135, 41), S(-100, 43), S(-47, 22), S(38, -12), S(57, -47), S(-18, -105), S(99, -85), S(39, -45), S(-126, -6), S(17, -58), S(-61, -16), S(75, -63), S(74, -112)};
constexpr ValPair tempo = S(0, 0); //DISABLED
constexpr ValPair passer_coefs[] = {S(0, 0), S(6, -20), S(-16, -4), S(-36, 28), S(2, 66), S(1, 169), S(0, 0), S(0, 0)};


int gamephaseInc[12] = {0,1,1,2,4,0,0,1,1,2,4,0};
int mg_table[12][64];
int eg_table[12][64];

void init_tables()
{
    for (int pc = (int)Piece::WHITEPAWN; pc <= (int)Piece::WHITEKING; pc++) {
        for (int sq = 0; sq < 64; sq++) {
            mg_table[pc]  [sq] = MG(psqt[pc * 64 + (sq ^ 56)]);
            eg_table[pc]  [sq] = EG(psqt[pc * 64 + (sq ^ 56)]);
            mg_table[pc+6][sq] = MG(psqt[pc * 64 + sq]);
            eg_table[pc+6][sq] = EG(psqt[pc * 64 + sq]);
        }
    }
}

Value eval(Board board)
{
    Value mg = 0, eg = 0;
    uint8_t mgPhase = 0;

    //evaluate each piece (inefficient)
    for (uint8_t sq = 0; sq < 64; ++sq) {
        uint8_t pc = (int)board.at<Piece>(sq);
        if (pc != (int)Piece::NONE) {
            int8_t perspective = (pc >= 6) ? -1 : 1; //-1 if black, 1 if white
            mg += mg_table[pc][sq] * perspective;
            eg += eg_table[pc][sq] * perspective;
            mgPhase += gamephaseInc[pc];
        }
    }

    //create pawn bitboards (NOTE: square A1 is gonna be 0!!! no flipping required tho)
    Bitboard wpawns = board.pieces(PieceType::PAWN, Color::WHITE);
    Bitboard bpawns = board.pieces(PieceType::PAWN, Color::BLACK);
    //squares on the sides of pawns
    Bitboard wsides = ((wpawns << 1) & 0x7f7f7f7f7f7f7f7f) | ((wpawns >> 1) & 0xfefefefefefefefe);
    Bitboard bsides = ((bpawns << 1) & 0x7f7f7f7f7f7f7f7f) | ((bpawns >> 1) & 0xfefefefefefefefe);
    //White and Black frontspans | atk frontspans (hardcoded fill alg)
    Bitboard wspans = (wpawns | wsides) << 8;
    wspans |= wspans << 8;
    wspans |= wspans << 16;
    wspans |= wspans << 32;
    Bitboard bspans = (bpawns | bsides) >> 8;
    bspans |= bspans >> 8;
    bspans |= bspans >> 16;
    bspans |= bspans >> 32;
    //passer bitboards! finally!
    Bitboard wpassed = wpawns & ~bspans;
    Bitboard bpassed = bpawns & ~wspans;
    // std::cout << wpassed << std::endl; //DEBUG (NOTE: the bitboard gets *actually* printed!)

    //add that stuff up! (careful about the flip!)
    //tf is wrong? engine plays worse
    for (int i = 1; i < 6; i++)
    {
        //count passer difference
        int passer_count = (wpassed & (0xFFULL << (i*8))).count() //not flipped for white
                    - (bpassed & (0xFFULL << ((7-i)*8))).count(); //flipped for black here!
        // std::cout << passer_count << std::endl;
        //add to MG/EG scores
        mg += passer_count * MG(passer_coefs[i]);
        eg += passer_count * EG(passer_coefs[i]);
    }
    //test pos for bench: 8/3k4/5p2/5P2/4K1P1/8/8/8 w - - 0 1
    //no passers: 329cp at depth 10
    //1 to 6: 347cp
    //2 to 7, or 1 to 7: SAME
    //testing with another one: k7/8/8/8/8/8/6P1/K7 w - - 0 1
    //no passer eval: 224cp score
    //with passers (1 to 6): 209
    //with (0 to 8): SAME

    //it was Black to move: invert the evaluation
    if (board.sideToMove() == Color::BLACK)
    {
        mg *= -1;
        eg *= -1;
    }

    //tempo evaluation: always benefit stm, so do it after the flip
    mg += MG(tempo);
    eg += EG(tempo);

    //tapered eval
    if (mgPhase > 24) mgPhase = 24; /* in case of early promotion */
    uint8_t egPhase = 24 - mgPhase;
    return (mg * mgPhase + eg * egPhase) / 24;
}
